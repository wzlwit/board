{"version":3,"sources":["comment.js","board.js","checkbox.js","App.js","serviceWorker.js","index.js"],"names":["Comment","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","changed","update","bind","assertThisInitialized","reset","removeTA","renderNormal","renderEditing","taChange","handleChange","inherits","createClass","key","value","setState","document","getElementsByTagName","index","idx","tA","console","log","taReset","val","react_default","a","createElement","className","onClick","onBlur","onChange","Component","Board","comments","add","newText","i","ary","ary2","splice","push","text","_this2","map","comment_Comment","Checkbox","checked","handleChecked","msg","type","defaultChecked","App","board_Board","checkbox_Checkbox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82ce33ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Comment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      changed:this.props.changed\r\n    };\r\n/*     this.handleEdit = this.handleEdit.bind(this); */\r\n    this.update = this.update.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.removeTA = this.removeTA.bind(this);\r\n    this.renderNormal = this.renderNormal.bind(this);\r\n    this.renderEditing = this.renderEditing.bind(this);\r\n    this.taChange=this.taChange.bind(this);\r\n    this.handleChange=this.handleChange.bind(this);\r\n  }\r\n\r\n/*   handleEdit() {\r\n    var idx=this.props.index;\r\n    var val=document.getElementsByTagName('textarea')[idx].value;\r\n    this.props.taChange(val,idx);\r\n  } */\r\n  handleChange() {\r\n    this.setState({changed: document.getElementsByTagName('textarea')[this.props.index].value});\r\n  }\r\n\r\n  update() {\r\n    var idx = this.props.index;\r\n    // console.log(idx);\r\n    var tA = document.getElementsByTagName('textarea')[idx];\r\n    // console.log(tA);\r\n    console.log(tA.value);\r\n     this.props.update(tA.value, idx);\r\n     \r\n  }\r\n  reset() {\r\n    this.props.taReset(this.props.index);\r\n\r\n  }\r\n  removeTA() {\r\n    this.props.removeTA(this.props.index);\r\n  }\r\n  taChange(){\r\n    var idx=this.props.index;\r\n    var ta=document.getElementsByTagName('textarea')[idx];\r\n    var val=ta.value;\r\n    this.props.taChange(val,idx);\r\n   }\r\n\r\n  renderNormal() {\r\n    return (\r\n      <div className=\"comment\">\r\n        <textarea value={this.props.value}></textarea>{/* must be 'value' instead of 'default value', otherwise the content of textareas will not change as default value */}\r\n        <button className='btn-primary' onClick={this.taChange}>Edit</button>\r\n        <button className='btn-orange' onClick={this.reset}>Reset</button>\r\n        <button className=\"btn-danger\" onClick={this.removeTA}>removeTA</button>\r\n      </div>\r\n    );\r\n  }\r\n  renderEditing() {\r\n    return (\r\n      <div className=\"comment\">\r\n        <textarea value={this.state.changed} onBlur={this.taChange} onChange={this.handleChange} ></textarea>\r\n        <button className='btn-green' onClick={this.update}>Save</button>\r\n        <button className='btn-orange' onClick={this.reset}>Reset</button>\r\n          <button className=\"btn-danger\" onClick={this.removeTA}>removeTA</button>\r\n      </div>\r\n        );\r\n      }\r\n    \r\n    \r\n  render() {\r\n    if (this.props.changed) {\r\n      return this.renderEditing();\r\n    } else {\r\n      return this.renderNormal();\r\n      }\r\n    }\r\n  }\r\n  \r\n","import React, { Component } from 'react';\r\nimport { Comment } from './comment';\r\n\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { comments: ['hello', 'world', 'i am here'], changed: [null, null, null] };\r\n\r\n        this.update = this.update.bind(this);\r\n        this.removeTA = this.removeTA.bind(this);\r\n        this.add = this.add.bind(this);\r\n        this.taChange = this.taChange.bind(this);\r\n        this.taReset = this.taReset.bind(this);\r\n    }\r\n    update(newText, i) {\r\n        var ary = this.state.comments;\r\n        var ary2 = this.state.changed;\r\n        ary[i] = newText;\r\n        ary2[i] = null;\r\n        console.log(\"comments are:\");\r\n        console.log(this.state.comments);\r\n        console.log(\"changed are:\");\r\n        console.log(this.state.changed);\r\n        this.setState({ comments: ary, changed: ary2 });\r\n    }\r\n    removeTA(index) {\r\n        let ary = this.state.comments, ary2 = this.state.changed;\r\n        ary.splice(index, 1);\r\n        ary2.splice(index, 1);\r\n        console.log(ary);\r\n        console.log(ary2);\r\n        this.setState({ comments: ary, changed: ary2 });\r\n        //after removeTA, must re-render by using setState()\r\n    }\r\n    add() {\r\n        let ary = this.state.comments, ary2 = this.state.changed;\r\n        ary.push('please edit and enter your comment');\r\n        ary2.push(null);\r\n        this.setState({ comments: ary, changed: ary2 });\r\n    }\r\n\r\n\r\n    taChange(text, index) {\r\n        var ary = this.state.changed;\r\n        ary[index] = text;\r\n        this.setState({ changed: ary });\r\n        console.log(\"textarea chnaged:\");\r\n        console.log(this.state.changed);\r\n    }//this function makes sure  when an TextArea is changed without saved, removing another textarea will work correctlly. the changed value will be kept in array of this.state.changed in <Board/>\r\n    taReset(index) {\r\n        var ary = this.state.changed;\r\n        ary[index] = null;\r\n        this.setState({ changed: ary });\r\n    }\r\n    render() {\r\n        return (\r\n            <div >\r\n                <h2>Comments Board:</h2>\r\n                <button className='btn-purple' onClick={this.add}>Add Comment</button>\r\n                <br />\r\n                <br />\r\n                {this.state.comments.map((text, i) => (<Comment index={i} key={i} update={this.update} removeTA={this.removeTA} value={text} changed={this.state.changed[i]} taChange={this.taChange} taReset={this.taReset} />))}\r\n                {/* <Comment value={this.state.comments[0]} /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nexport class Checkbox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { checked: false };\r\n        this.handleChecked = this.handleChecked.bind(this);\r\n    }\r\n    handleChecked() {\r\n        this.setState({ checked: !this.state.checked });\r\n    }\r\n    render() {\r\n        var msg;\r\n        msg = this.state.checked ? 'checked' : 'unchecked';\r\n        return (\r\n            <div>\r\n                <br />\r\n                <h2>Play with a checkbox</h2>\r\n                <input type='checkbox' onChange={this.handleChecked} defaultChecked={this.state.checked} />\r\n                <h3>Checkbox is \"{msg}\"</h3>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Board } from './board';\r\nimport { Checkbox } from './checkbox';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>React Exercises</h1>\r\n        <Board />\r\n        <Checkbox />\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}