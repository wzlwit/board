{"version":3,"sources":["comment.js","board.js","checkbox.js","App.js","serviceWorker.js","index.js"],"names":["Comment","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","changed","props","handleChange","setState","document","getElementsByTagName","index","value","update","idx","tA","reset","taReset","removeTA","taChange","val","inherits","createClass","key","react_default","a","createElement","className","onClick","onBlur","onChange","renderEditing","renderNormal","Component","Board","comments","newText","i","ary","ary2","splice","add","push","text","_this2","map","comment_Comment","Checkbox","checked","handleChecked","msg","type","defaultChecked","App","board_Board","checkbox_Checkbox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.252e65d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class Comment extends Component {\n  state = { changed: this.props.changed }\n\n\n  handleChange = () => {\n    this.setState({ changed: document.getElementsByTagName('textarea')[this.props.index].value });\n  }\n\n  update = () => {\n    var idx = this.props.index;\n    var tA = document.getElementsByTagName('textarea')[idx];\n    this.props.update(tA.value, idx);\n\n  }\n  reset = () => {\n    this.state.changed = null;\n    this.props.taReset(this.props.index);\n  }\n  removeTA = () => {\n    this.props.removeTA(this.props.index);\n  }\n  taChange = () => {\n    var idx = this.props.index;\n    var ta = document.getElementsByTagName('textarea')[idx];\n    var val = ta.value;\n    this.props.taChange(val, idx);\n  }\n\n  renderNormal() {\n    return (\n      <div className=\"comment\">\n        <textarea value={this.props.value}></textarea>{/* must be 'value' instead of 'default value', otherwise the content of textareas will not change as default value */}\n        <button className='btn-primary' onClick={this.taChange}>Edit</button>\n        <button className='btn-orange' onClick={this.reset}>Reset</button>\n        <button className=\"btn-danger\" onClick={this.removeTA}>removeTA</button>\n      </div>\n    );\n  }\n\n\n  renderEditing() {\n    return (\n      <div className=\"comment\">\n        <textarea value={this.state.changed} onBlur={this.taChange} onChange={this.handleChange} ></textarea>\n        <button className='btn-green' onClick={this.update}>Save</button>\n        <button className='btn-orange' onClick={this.reset}>Reset</button>\n        <button className=\"btn-danger\" onClick={this.removeTA}>removeTA</button>\n      </div>\n    );\n  }\n\n\n  render() {\n    if (this.props.changed) {\n      return this.renderEditing();\n    } else {\n      return this.renderNormal();\n    }\n  }\n}\n\n","import React, { Component } from 'react';\nimport { Comment } from './comment';\n\nexport class Board extends Component {\n    state = { comments: ['hello', 'world', 'i am here'], changed: [null, null, null] };\n\n    update = (newText, i) => {\n        var ary = this.state.comments;\n        var ary2 = this.state.changed;\n        ary[i] = newText;\n        ary2[i] = null;\n        this.setState({ comments: ary, changed: ary2 });\n    }\n    removeTA = (index) => {\n        let ary = this.state.comments, ary2 = this.state.changed;\n        ary.splice(index, 1);\n        ary2.splice(index, 1);\n        this.setState({ comments: ary, changed: ary2 });\n        //after removeTA, must re-render by using setState()\n    }\n    add = () => {\n        let ary = this.state.comments, ary2 = this.state.changed;\n        ary.push('please edit and enter your comment');\n        ary2.push(null);\n        this.setState({ comments: ary, changed: ary2 });\n    }\n    taChange = (text, index) => {\n        var ary = this.state.changed;\n        ary[index] = text;\n        this.setState({ changed: ary });\n    }//this function makes sure  when an TextArea is changed without saved, removing another textarea will work correctlly. the changed value will be kept in array of this.state.changed in <Board/>\n    taReset = (index) => {\n        var ary = this.state.changed;\n        ary[index] = null;\n        this.setState({ changed: ary });\n    }\n    render() {\n        return (\n            <div >\n                <h2>Comments Board:</h2>\n                <button className='btn-purple' onClick={this.add}>Add Comment</button>\n                {this.state.comments.map((text, i) => (<Comment index={i} key={i} update={this.update} removeTA={this.removeTA} value={text} changed={this.state.changed[i]} taChange={this.taChange} taReset={this.taReset} />))}\n                {/* <Comment value={this.state.comments[0]} /> */}\n            </div>\n        );\n    }\n}\n\n\n","import React, { Component } from 'react';\n\nexport class Checkbox extends Component {\n    state = { checked: false };\n\n    handleChecked = () => {\n        this.setState({ checked: !this.state.checked });\n    }\n    render() {\n        var msg;\n        msg = this.state.checked ? 'checked' : 'unchecked';\n        return (\n            <div>\n                <h2>Play with a checkbox</h2>\n                <input type='checkbox' onChange={this.handleChecked} defaultChecked={this.state.checked} />\n                <h3>Checkbox is \"{msg}\"</h3>\n                <br />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Board } from './board';\nimport { Checkbox } from './checkbox';\nimport './App.css';\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React Exercises</h1>\n        <Board />\n        <Checkbox />\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}